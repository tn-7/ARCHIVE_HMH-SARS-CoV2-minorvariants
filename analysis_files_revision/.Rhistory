scan_factors = c('Duration','age18under','age55plus','sex','chronic_lung_disease',
'chronic_liver_disease', 'chronic_kidney_disease', 'chronic_heart_disease',
'transplant_patient', 'hiv', 'hypertension', 'diabetes', 'cancer', 'obesity',
'plasma', 'mAb', 'admitted_hospital','vaccine_status',
'vocAlpha','vocDelta','collection_month',
'surveillance','CT','median_coverage','run', 'PUI')
scale_scan_factors = function(patient_var_tmp, scan_factors) {
p_sub = patient_var_tmp %>%
select(MCoVNumber,lineage,Duration,COLLECTION_DT:high_counts,one_of(scan_factors)) %>%
unique
p_sub[, colnames(p_sub) %in% scan_factors]
p_sub_scaled = p_sub %>% select(one_of(scan_factors)) %>%
mutate_if(is.numeric, normalize) %>% # scale will z scale it, instead of the normalize fx above which is min max
cbind(p_sub %>% select(!one_of(scan_factors)))
return(p_sub_scaled)
}
scan_factors_trim = scan_factors[!scan_factors %in% c("transplant_patient", "hiv")]
p_sub_scaled = scale_scan_factors(
patient_var_tmp %>% filter(n_var < 30 & CT < 26),
scan_factors_trim)
y<-log2(p_sub_scaled$n_var+1)
x<-(p_sub_scaled[, colnames(p_sub_scaled) %in% scan_factors_trim]) %>% data.matrix()
lasso_under_30 = lasso_xy(x,y) %>% mutate(cutoff = "n_var_under_30") %>%
arrange(coefficient) %>% mutate(factor = fct_reorder(factor, coefficient))
lasso_initial_features = lasso_under_30 %>% ggplot(aes(x=factor, y = coefficient)) +
geom_bar(stat="identity") + coord_flip()
ggsave("ggsave/lasso_initial_features.pdf", lasso_initial_features, height = 4, width = 3)
# p_sub_over = scale_scan_factors(
#   patient_var_tmp %>% filter(n_var > 30 & CT > 26),
#                                 scan_factors_trim)
# y_over<-log2(p_sub_over$n_var+1)
# x_over<-data.matrix(p_sub_over[, colnames(p_sub_over) %in% scan_factors_trim])
#
#
# lasso_under_30 = lasso_xy(x,y) %>% mutate(cutoff = "n_var_under_30")
# lasso_over_30 = lasso_xy(x_over, y_over) %>% mutate(cutoff = "n_var_over_30")
#
# lasso_bio_vs_artifact = rbind(lasso_under_30, lasso_over_30)
#
#
# lasso_xy_plot = lasso_bio_vs_artifact %>% spread(., cutoff, coefficient) %>%
# ggplot(aes(x = n_var_over_30, y = n_var_under_30, label = factor)) +geom_point() +
#   geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
#   geom_label_repel(max.overlaps = Inf, alpha = 0.3,
#     segment.size      = 0.5,
#     segment.curvature = -0.1
#   )  + #ylim(c(-0.25,0.25)) +
#   theme_minimal() + ylab("LASSO coef. on log2(n_var+1), Ct<26 & n_var<30\nhypothesized biological data") +
#   xlab("LASSO coef. on log2(n_var+1), Ct>26 & n_var>30\nhypothesized nonbiological data")
# lasso_xy_plot
# ##ggsave("#ggsave/lasso_xy_plot.pdf", lasso_xy_plot, height = 5, width = 5)
library(ggbreak)
lasso_initial_features = lasso_under_30 %>% ggplot(aes(x=factor, y = coefficient)) +
geom_bar(stat="identity") + coord_flip() + scale_x_break(c(0.5, 1.4))
lasso_initial_features
lasso_under_30 %>% ggplot(aes(x=factor, y = coefficient)) +
geom_bar(stat="identity") + coord_flip() + scale_x_break(c(0.5, 1.4))
lasso_under_30 %>% ggplot(aes(x=factor, y = coefficient)) +
geom_bar(stat="identity") + coord_flip() + scale_y_break(c(0.5, 1.4))
p_sub_scaled = p_sub %>% select(one_of(scan_factors)) %>%
mutate_if(is.numeric, scale) %>% # scale will z scale it, instead of the normalize fx above which is min max
cbind(p_sub %>% select(!one_of(scan_factors)))
scan_factors = c('Duration','age18under','age55plus','sex','chronic_lung_disease',
'chronic_liver_disease', 'chronic_kidney_disease', 'chronic_heart_disease',
'transplant_patient', 'hiv', 'hypertension', 'diabetes', 'cancer', 'obesity',
'plasma', 'mAb', 'admitted_hospital','vaccine_status',
'vocAlpha','vocDelta','collection_month',
'surveillance','CT','median_coverage','run', 'PUI')
scale_scan_factors = function(patient_var_tmp, scan_factors) {
p_sub = patient_var_tmp %>%
select(MCoVNumber,lineage,Duration,COLLECTION_DT:high_counts,one_of(scan_factors)) %>%
unique
p_sub[, colnames(p_sub) %in% scan_factors]
p_sub_scaled = p_sub %>% select(one_of(scan_factors)) %>%
mutate_if(is.numeric, scale) %>% # scale will z scale it, instead of the normalize fx above which is min max
cbind(p_sub %>% select(!one_of(scan_factors)))
return(p_sub_scaled)
}
library(ggbreak)
scan_factors_trim = scan_factors[!scan_factors %in% c("transplant_patient", "hiv")]
p_sub_scaled = scale_scan_factors(
patient_var_tmp %>% filter(n_var < 30 & CT < 26),
scan_factors_trim)
y<-log2(p_sub_scaled$n_var+1)
x<-(p_sub_scaled[, colnames(p_sub_scaled) %in% scan_factors_trim]) %>% data.matrix()
lasso_under_30 = lasso_xy(x,y) %>% mutate(cutoff = "n_var_under_30") %>%
arrange(coefficient) %>% mutate(factor = fct_reorder(factor, coefficient))
lasso_initial_features
lasso_initial_features = lasso_under_30 %>% ggplot(aes(x=factor, y = coefficient)) +
geom_bar(stat="identity") + coord_flip() + scale_y_break(c(0.5, 1.4))
ggsave("ggsave/lasso_initial_features.pdf", lasso_initial_features, height = 4, width = 3)
lasso_initial_features = lasso_under_30 %>% ggplot(aes(x=factor, y = coefficient)) +
geom_bar(stat="identity") + coord_flip()
ggsave("ggsave/lasso_initial_features.pdf", lasso_initial_features, height = 4, width = 3)
check_levels = function(x) { return(levels(x) %>% length ==2) }
numeric1 = function(x) { return(as.numeric(x)-1) }
plot_feature_n = function(p_sub_scaled) {
sum_n = nrow(p_sub_scaled)
feature_stats_IP = p_sub_scaled %>% select(one_of(scan_factors)) %>%
filter(admitted_hospital == 1) %>%
select_if(is.factor) %>% select_if(check_levels) %>%
mutate_if(is.factor, numeric1) %>% colSums() %>%
data.frame(feature = names(.), IP = .)
sum_n_IP = feature_stats_IP["admitted_hospital","IP"]
feature_stats_OP = p_sub_scaled %>% select(one_of(scan_factors)) %>%
filter(admitted_hospital == 0) %>%
select_if(is.factor) %>% select_if(check_levels) %>%
mutate_if(is.factor, numeric1) %>% colSums() %>%
data.frame(feature = names(.), OP = .)
sum_n_OP = sum_n - sum_n_IP
feature_stats = left_join(feature_stats_IP, feature_stats_OP)
feature_n_plot = feature_stats %>% ggplot(aes(x=IP, y = OP, label = feature)) +
geom_abline(slope =1, color = "red", linetype = "dashed") +
geom_point() + geom_text_repel() +
scale_y_continuous( breaks = seq(0,1500,100), limits = c(0,1400),
sec.axis = sec_axis(~ . / sum_n_OP, labels = scales::label_percent(),
breaks = seq(0,1,0.1))) +
scale_x_continuous( breaks = seq(0,2000,100), guide = guide_axis(angle = 90),
sec.axis = sec_axis(~ . / sum_n_IP, labels = scales::label_percent(),
breaks = seq(0,1,0.1))) + theme_pubr() +
xlab(paste0("Inpatient (n & % of ", sum_n_IP, ")")) +
ylab(paste0("Outpatient (n & % of ", sum_n_OP, ")"))
return(feature_n_plot)
}
undated_feature_n_plot = plot_feature_n(p_sub_scaled)
julyonwards_feature_n_plot = plot_feature_n(p_sub_scaled %>%
filter(collection_date>="2021-07-01"))
feature_n_plot = ggarrange(undated_feature_n_plot + ggtitle("12/2020 - 11/2021"),
julyonwards_feature_n_plot + ggtitle("07/2021 - 11/2021"), align = "h",
labels = list("A","B"))
feature_n_plot
#ggsave("#ggsave/feature_n_plot.pdf", feature_n_plot, width = 16, height = 8)
feature_n_plot = ggarrange(undated_feature_n_plot + ggtitle("12/2020 - 11/2021"),
julyonwards_feature_n_plot + ggtitle("07/2021 - 11/2021"), align = "h",
labels = list("A","B"))
feature_n_plot
feature_n_plot = ggarrange(undated_feature_n_plot + ggtitle("12/2020 - 11/2021"),
julyonwards_feature_n_plot + ggtitle("07/2021 - 11/2021"), align = "h",
labels = list("A","C"))
feature_n_plot
feature_n_plot = ggarrange(undated_feature_n_plot + ggtitle("12/2020 - 11/2021"),
julyonwards_feature_n_plot + ggtitle("07/2021 - 11/2021"), align = "h",
labels = list("A","B"))
feature_n_plot
feature_n_plot
patient_counts_30
patient_counts_30 %>% mutate(ordinal_counts = cut(n_var, breaks = seq(0,30,5)))
p_sub_scaled = scale_scan_factors(
patient_var_tmp %>% filter(n_var < 30 & CT < 26),
scan_factors_trim)
p_sub_scaled = scale_scan_factors(
patient_var_tmp %>% filter(n_var < 30 & CT < 26),
scan_factors_trim) %>% mutate(ordinal_counts = cut(n_var, breaks = seq(0,30,5)))
tmp = unitable(p_sub_scaled, other_iv = "CT")
unitable = function(patient_counts_uni, include,
dv = "ordinal_counts", other_iv = NA) {
index = 0; for (i in include) {
flag = T
index = index + 1
if (!is.na(other_iv)){
formulas_tmp = formula(paste0(dv, " ~", i, "+", other_iv))
} else {
formulas_tmp = formula(paste0(dv, " ~", i))
}
m <- tryCatch(mixed_model(formulas_tmp,
random = ~ 1 | run,
data = patient_counts_uni,
family = binomial, control = list(iter_EM = 0)),
error=function(e) flag<<-FALSE)
if (!flag) next
coef_table = summary(m)$coef_table
# table of estimates with 95% CI
tab <- cbind(estimate = coef_table[,1],
se = coef_table[,2], pvalue = coef_table[,4]) %>%
#UL = coef_table[,1] + 1.96 * coef_table[,2]) %>%
as.data.frame
out_odds_tmp = (tab) %>%
mutate(pval = coef_table[,4]) %>%
.[-1,] %>% rownames_to_column
if (index == 1) {
out_odds = out_odds_tmp
} else {
out_odds = rbind(out_odds, out_odds_tmp)
}
}
out_odds = out_odds %>% arrange(pval) %>%
mutate(rowname = str_remove(rowname, "YES"))
# count number of "YES" occurrences per column
YEScount = function(string) {
return(sum(str_count(string, pattern = "YES")))
}
counts = sapply(patient_counts_uni_tmp %>%
filter(!is.na(.data[[dv]])), YEScount)
df_counts = data.frame(rowname = names(counts), counts)
out = out_odds %>% left_join(df_counts, by = "rowname")
return(out)
}
tmp = unitable(p_sub_scaled, include = scan_factors, other_iv = "CT")
tmp
unitable = function(patient_counts_uni, include,
dv = "ordinal_counts", other_iv = NA) {
index = 0; for (i in include) {
flag = T
index = index + 1
if (!is.na(other_iv)){
formulas_tmp = formula(paste0(dv, " ~", i, "+", other_iv))
} else {
formulas_tmp = formula(paste0(dv, " ~", i))
}
m <- tryCatch(mixed_model(formulas_tmp,
random = ~ 1 | run,
data = patient_counts_uni,
family = binomial, control = list(iter_EM = 0)),
error=function(e) flag<<-FALSE)
if (!flag) next
coef_table = summary(m)$coef_table
# table of estimates with 95% CI
tab <- cbind(estimate = coef_table[,1],
se = coef_table[,2], pvalue = coef_table[,4]) %>%
#UL = coef_table[,1] + 1.96 * coef_table[,2]) %>%
as.data.frame
out_odds_tmp = (tab) %>%
mutate(pval = coef_table[,4]) %>%
.[-1,] %>% rownames_to_column
if (index == 1) {
out_odds = out_odds_tmp
} else {
out_odds = rbind(out_odds, out_odds_tmp)
}
}
out_odds = out_odds %>% arrange(pval) %>%
mutate(rowname = str_remove(rowname, 1))
# count number of "YES" occurrences per column
YEScount = function(string) {
return(sum(str_count(string, pattern = 1)))
}
counts = sapply(patient_counts_uni_tmp %>%
filter(!is.na(.data[[dv]])), YEScount)
df_counts = data.frame(rowname = names(counts), counts)
out = out_odds %>% left_join(df_counts, by = "rowname")
return(out)
}
tmp = unitable(p_sub_scaled, include = scan_factors, other_iv = "CT")
source("./scripts/startup.R")
source("./scripts/load_data.R")
normalize <- function(x, na.rm = TRUE) {
scaled = (x- min(x)) /(max(x)-min(x))
return()
}
patient_counts_30
# Load common functions, libraries, and -- data/variables from 01_load_new_samples data
source("./scripts/startup.R")
var = read_feather('processing/minor_variants_filtered_100x0.01_50.arrow')
samples_n_var = read_feather("processing/samples_n_var.arrow")
# first iteration, just in small intervals
genes = fread("ntpos_gene_update.csv", data.table = F);
codon_translate = fread("codon.txt", data.table=F, sep = "\t", skip = 2, fill = T) %>%
select(ref_codon = 1, ref_sym = 3);
gene_start_end = genes %>% group_by(gene_id) %>% summarize(start = min(ntpos),
end = max(ntpos)) %>%
arrange(start) %>% as.data.frame
for (i in 1:nrow(gene_start_end)) {
gene = gene_start_end[i, "gene_id"] %>% .[[1]]
assign_gene = (var$ntpos >= gene_start_end[i, "start"] & var$ntpos <= gene_start_end[i, "end"])
var[assign_gene, "gene"] = gene
var[assign_gene, "codon_pos"] = ((var$ntpos[assign_gene] - gene_start_end[i, "start"]) %% 3) + 1
var[assign_gene, "aapos"] = ceiling((var$ntpos[assign_gene] - gene_start_end[i, "start"] + 1) / 3)
var[assign_gene,"ntpos_codonstart"] = var$ntpos[assign_gene]+1-var$codon_pos[assign_gene]
}
# if pos 1, get the next two basepairs
# x, x+1, x+2
# if pos 2, get the previous and the next one
# x-1, x, x+1
# if pos 3, get the previous
# x-2, x-1, x
# range rule: (x+1-pos):(x+1-pos)+2
for (i in 1:nrow(gene_start_end)) {
gene = gene_start_end[i, "gene_id"] %>% .[[1]]
assign_gene = (genes$ntpos >= gene_start_end[i, "start"] & genes$ntpos <= gene_start_end[i, "end"])
genes[assign_gene, "codon_pos"] = ((genes$ntpos[assign_gene] - gene_start_end[i, "start"]) %% 3) + 1
genes[assign_gene, "aapos"] = ceiling((genes$ntpos[assign_gene] - gene_start_end[i, "start"] + 1) / 3)
}
aa = genes %>% group_by(gene_id, aapos) %>%
summarize(ref_codon = paste(refnt,collapse=","), ntpos_codonstart = min(ntpos)) %>%
separate(ref_codon, sep = ",", into = c("ref.1", "ref.2", "ref.3"), remove = F) %>%
mutate(ref_codon = gsub(",","",ref_codon)) %>%
filter(!gene_id=="") %>% left_join(codon_translate)
var_aa = var %>% left_join(aa)
# if codon pos is #1
major_string = data.frame(first = c("major", "ref.2", "ref.3"),
second = c("ref.1", "major", "ref.3"),
third = c("ref.1", "ref.2", "major"));
minor_string = major_string %>% mutate( across(.cols = everything(), ~str_replace(., "major", "minor")))
# major flaw in the above is that it assumes there are no more than 1 mutation
# (minor or major) in the same codon. For us it does not matter, because we are doing codon analysis
# involving just positional importance not actual amino acid conversion analysis. Thus the above is
# just rough codon sequence analysis.
for (i in 1:3) {
idx = (var_aa$codon_pos == i)
var_aa[idx, "majorcodon"] = var_aa %>% filter(codon_pos == i) %>%
unite("tmp", major_string[,i], sep = "") %>% select(tmp)
var_aa[idx, "minorcodon"] = var_aa %>% filter(codon_pos == i) %>%
unite("tmp", minor_string[,i], sep = "") %>% select(tmp)
}
# translate the major and minor variants
patient_data <- fread("sample_and_patient_data.csv",data.table=F) %>%
mutate(MCoVNumber=str_remove(mcov_id, "-")) %>% mutate(collection_date=as.Date(COLLECTION_DT, "%m/%d/%y")) %>%
mutate(collection_month=format(as.Date(collection_date), "%Y-%m")) %>%
mutate(CT=ifelse(INSTRUMENT_RESULT<50, INSTRUMENT_RESULT, NA_integer_)) %>%
mutate(vaccine_status=if_else(Vaccine_Status=="No vaccine",0,1)) %>%
mutate(age18under=if_else(Age_Group=="00-17",1,0)) %>%
mutate(age18to54=if_else(Age_Group=="18-54",1,0)) %>%
mutate(age55plus=if_else(Age_Group=="55-64"|Age_Group=="65+",1,0)) %>%
select(MCoVNumber, collection_date, collection_month, run=run_group, CT,
ordering_clinic=ORDERING_CLINIC_TYPE,pui=PUI, age18under, age18to54,
age55plus, sex=SEX, ethnicity=Ethnicity, obesity=Obesity_YN,
chronic_lung_disease=Chronic_Lung_Disease_YN,
chronic_liver_disease=Chronic_Liver_Disease_YN,
hcw=IS_SURVEILLANCE, chronic_heart_disease=Chronic_Heart_Disease_YN,
chronic_kidney_disease=Chronic_Kidney_Disease_YN,
hypertension=Hypertension_YN, diabetes=Diabetes_YN,
cancer=Cancer_YN, hiv=HIV_YN, transplant_patient=Transplant_Patient,
vaccine_status, admitted_hospital=Admitted_YN, highest_level=HIGHEST_LEVEL_OF_CARE,
max_respiratory_support=MaxRespiratorySupport, mAb=mAb_YN, plasma=Plasma_YN) %>%
mutate(surveillance = if_else(hcw == "Yes Surveillance",1,0))
factor_columns <- c("collection_month","run","ordering_clinic", "pui", "age18under",
"age18to54", "age55plus","sex","ethnicity","obesity","surveillance",
"chronic_lung_disease","chronic_liver_disease","chronic_heart_disease",
"chronic_kidney_disease","hypertension","diabetes","cancer","hiv",
"transplant_patient","vaccine_status","admitted_hospital",
"highest_level","max_respiratory_support","mAb","plasma")
patient_data[factor_columns] <- lapply(patient_data[factor_columns], factor)
sample_type = fread("sample_type_PUI.csv", data.table = F) %>%
mutate(MCoVNumber=str_remove(mcov_id, "-"))
sample_duration =  fread("timestamp_sample_RNA_extraction_processing.csv",
data.table = F) %>%
mutate(MCoVNumber=str_remove(mcov_id, "-"))
patient_data[factor_columns]<-lapply(patient_data[factor_columns], factor)
patient_var_tmp = var_aa %>% left_join(codon_translate %>%
select(majorcodon = ref_codon, tmp_sym = ref_sym)) %>%
mutate(majoraa = tmp_sym) %>% select(!tmp_sym) %>%
select(!c(gene_id, ref.1, ref.2, ref.3)) %>%
full_join(samples_n_var) %>% left_join(patient_data) %>%
select(-pui) %>% left_join(sample_type) %>%
left_join(sample_duration %>% select(-COLLECTION_DT)) %>%
mutate(vocAlpha=if_else(str_starts(scorpio_call, "Alpha"),1,0),
vocDelta=if_else(str_starts(scorpio_call, "Delta"),1,0)) %>%
mutate(vocAlpha=as.factor(vocAlpha), vocDelta=as.factor(vocDelta))
#### ACTUAL PATIENT ANALYSIS FOR 02 RMD.
write_feather(patient_var_tmp, "processing/patient_var_tmp.arrow")
patient_var = patient_var_tmp %>% filter(INSTRUMENT_RESULT < 26)
#fwrite(var_aa, "processing/var_aa_ct.txt", sep = "\t", quote = F)
write_feather(patient_var, "processing/patient_var.arrow")
patient_var_30 = patient_var %>% filter(n_var < 30)
write_feather(patient_var_30, "processing/patient_var_30.arrow")
patient_counts = patient_var %>% select(MCoVNumber,lineage:last_col()) %>% unique
write_feather(patient_counts, "processing/patient_counts.arrow")
patient_counts_30 = patient_counts %>% filter(n_var < 30)
write_feather(patient_counts_30, "processing/patient_counts_30.arrow")
patient_var_tmp = read_feather("processing/patient_var_tmp.arrow")
idx = seq(0,100,5)
for (i in 2:length(idx)) {
minorcounts = patient_var_tmp %>% select(name) %>%
group_by(name) %>%
summarize(counts = n()) %>% filter((counts > idx[i-1]) & (counts < idx[i])) %>%
as.data.frame()
minorallele = patient_var_tmp %>% filter((name %in% minorcounts$name)) %>% mutate(codon_pos = as.factor(codon_pos))
##### BIN MINOR ALLELE FREQUENCIES (MAF)
binned_minorallele = minorallele %>% mutate(allele_freq_bin =
cut(minorfreq, breaks=seq(0.00, 1, by = 0.05))) %>%
drop_na(allele_freq_bin)
freq_minorallele = binned_minorallele %>% group_by(codon_pos, allele_freq_bin) %>% summarize(counts = n()) %>%
group_by(allele_freq_bin) %>%
left_join(
binned_minorallele %>% group_by(allele_freq_bin) %>% summarize(total_bin = n()) # doing the above w/o codon pos
) %>% mutate(proportion = counts / total_bin) %>% mutate(n_bin = idx[i])
if (i == 2) {
saved_freq_minorallele = freq_minorallele
} else {
saved_freq_minorallele = rbind(saved_freq_minorallele, freq_minorallele)
}
}
saved_freq_minorallele_lowestfreq = saved_freq_minorallele %>% filter(allele_freq_bin == "(0,0.05]");
ggline(saved_freq_minorallele_lowestfreq, x = "n_bin", y = "proportion", color = "codon_pos",
shape = "codon_pos", palette = "jco") +
#scale_color_manual(values = c("red", "green", "blue")) +
rotate_x_text(90) + ylim(0.2,0.5) + geom_hline(yintercept = 0.33, color = "red",
linetype = "dashed")
saved_freq_minorallele_lowestfreq
input = patient_var_tmp %>% filter(n_var > 0)
ctplot = function(input, xlab = T, legend = T) {
ct_cutoff = input %>%
mutate(codon_pos = as.factor(codon_pos)) %>%
filter(INSTRUMENT_RESULT < 40) %>%
mutate(ct_bin = cut(INSTRUMENT_RESULT, breaks=seq(1, 40, by = 1), right = FALSE)) %>%
group_by(ct_bin, codon_pos) %>%
summarise(n = n()) %>% group_by(ct_bin) %>%
mutate(ct_right = gsub(".*[,]([^.]+)[)].*", "\\1",
as.character(ct_bin)) %>% as.numeric) %>%
mutate(total = sum(n), prop = n/total)
p = ggplot(ct_cutoff, aes(x = ct_right, y = prop,
shape = codon_pos, color = codon_pos)) +
theme_pubr() + geom_line() + geom_point() +
geom_hline(yintercept = 0.33, color = "grey", linetype = "dashed") +
geom_vline(xintercept = seq(6,40,2), color = "grey", linetype = "dotted") +
geom_vline(xintercept = 26, color = "grey10", linetype = "dashed") +
scale_y_continuous(limits = c(.2,.5)) +
scale_x_continuous(breaks=seq(0,40,10))
if (xlab == F) {
p = p + xlab(NULL) + ylab(NULL) +
scale_x_continuous(breaks=seq(0,40,10))
}
if (legend == F) {
p = p + theme(legend.position='none')
}
xhist =
axis_canvas(p, axis = "x") +
geom_col(data = ct_cutoff %>% select(ct_bin, ct_right, total) %>% distinct(),
aes(x = ct_right, y = total),
color = 'grey', stat = "identity")
out_plot = p %>%
insert_xaxis_grob(xhist, grid::unit(0.5, "in"), position = "top") %>%
ggdraw()
}
nall = ctplot(input)
print(nall)
n30plus = ctplot(input %>% filter(n_var > 30), legend = F, xlab = F)
n30minus = ctplot(input %>% filter(n_var < 30), legend = F, xlab = F) + theme(legend.position = "none")
#plot_grid(n30plus, n30minus, nrow = 2, align = "v")
plot1_codon_counts = plot_grid(n30plus,
n30minus,
nrow = 2, ncol = 1,
align = "hv")
plot1_codon_counts
ggsave("ggsave/plot1_codon_counts.pdf", plot1_codon_counts, height = 4, width = 4)
idx = seq(0,50,5)
nbin = function(patient_var, MAF = 0.01, idx = seq(0,50,5)) {
tmp = patient_var %>%
filter(minorfreq > MAF) %>%
mutate(n_bin = cut(n_var, breaks = idx)) %>%
group_by(n_bin, codon_pos) %>%
summarize(counts = n())
totals_bin = tmp %>% group_by(n_bin) %>% summarize(total = sum(counts))
tmp = tmp %>% left_join(totals_bin) %>% mutate(proportion = counts / total) %>%
mutate(codon_pos = as.factor(codon_pos)) %>%
mutate(n_threshold = gsub(".*[,]([^.]+)[]].*", "\\1",
as.character(n_bin)) %>% as.numeric)
tmp$MAF = MAF
return(tmp)
}
# MAF_range = c(0.01,0.02,0.05,0.10,0.2)
# index = 0
# for (MAF in MAF_range) {
#   index = index + 1
#   tmp = nbin(patient_var_tmp, MAF, idx = seq(0,50,5))
#   if (index == 1) {
#     n_MAF_out = tmp
#   } else {
#     n_MAF_out = rbind(n_MAF_out, tmp)
#   }
# }
#
# n_MAF_hm = n_MAF_out %>% ungroup %>% filter(codon_pos == 3) %>%
#   select(n_threshold, proportion, MAF, counts) %>% replace(is.na(.), 55)
#
#
# # ggplot(n_MAF_hm, aes(n_threshold, MAF, fill=residual)) +
# #   geom_tile() + theme_pubr() + scale_fill_viridis(option="A")
#
# p = ggplot(n_MAF_hm, aes(x = n_threshold, y = proportion,
#                           color = as.factor(MAF))) +
#   theme_pubr() + geom_line() + geom_point() + ylim(0.25,0.5) +
#   geom_hline(yintercept = 0.33, color = "grey10", linetype = "dashed") +
#   geom_vline(xintercept = idx[-1], color = "grey", linetype = "dotted") +
#   scale_x_continuous(breaks=seq(5,50,5), limits= c(5,55)) +
#   theme(axis.text.x = element_text(angle=90))
#
# xhist =
#   axis_canvas(p, axis = "x") +
#   geom_col(data = n_MAF_hm,
#                  aes(x = n_threshold, y = counts, fill = as.factor(MAF)),
#                 stat = "identity") +
#   geom_text(data = n_MAF_hm %>%
#               select(MAF, n_threshold, counts) %>%
#               filter(MAF == MAF_range[1]),
#             aes(x = n_threshold, y = 5000, label = counts, angle = 90))
#
# p %>%
#   insert_xaxis_grob(xhist, grid::unit(0.5, "in"), position = "top") %>%
#   ggdraw()
p_data = patient_var_tmp %>% group_by(MCoVNumber) %>%
summarize(n_var, prop3 = sum(codon_pos==3)/n_var) %>% distinct() #%>%
#  replace_na(list(prop3 = 0))
p = ggplot(p_data, aes(x = n_var, y = prop3)) +
geom_point(shape = 21, alpha = 0.1) +
geom_hline(yintercept = 0.33, linetype = "dashed", color = "grey") +
theme_pubr() + scale_x_continuous(trans = "log1p",
breaks = c(0,1,5,10,50,100,500)) +
geom_smooth(data = p_data %>%
filter(n_var > 0), se = F,
aes(x=n_var, y = prop3), method = "loess",
color = "red")
hist = ggplot(data = patient_counts, aes(x = n_var)) +
geom_histogram() +
geom_violin(aes(y = 3), draw_quantiles = c(0.05,0.1, .25,.5,.75, .90, 0.95), width = 2,
color = "red", alpha = .5) +
scale_y_continuous(trans = "log1p", breaks = c(0,1,10,100,1000,5000)) +
scale_x_continuous(trans = "log1p", breaks = c(0,1,5,10,30,100,500)) +
theme_pubr()
quantile(patient_counts %>% filter(n_var < 30) %>% pull(n_var), probs = c(0.05,0.1, .25,.5,.75, .90, 0.95))
((plot1_histogram = plot_grid(hist, p, align = "v", nrow = 2)))
ggsave("ggsave/plot1_histogram.pdf", plot = plot1_histogram, width = 4, height = 4)
